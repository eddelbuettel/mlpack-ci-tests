# Starting from https://eddelbuettel.github.io/r-ci/ and adapted
# R package specific parts for build and test commented out, cmake added, deps adjusted

name: ci

on:
  push:
  pull_request:
  workflow_dispatch:

env:
  _R_CHECK_FORCE_SUGGESTS_: "false"

jobs:
  stepOne:
    strategy:
      matrix:
        include: 
          #- {os: macOS-latest, compiler: clang}
          - {os: ubuntu-latest, compiler: gcc}
        
    runs-on: ${{ matrix.os }}

    outputs:
      r_bindings: ${{ steps.mlpack_version.outputs.mlpack_r_package }}

    steps:
      - name: Checkout 
        uses: actions/checkout@v4

      - name: Extract mlpack version
        id: mlpack_version
        run: |
          MLPACK_VERSION_MAJOR=$(grep -i ".*#define MLPACK_VERSION_MAJOR.*" src/mlpack/core/util/version.hpp | grep -o "[0-9]*")
          MLPACK_VERSION_MINOR=$(grep -i ".*#define MLPACK_VERSION_MINOR.*" src/mlpack/core/util/version.hpp | grep -o "[0-9]*")
          MLPACK_VERSION_PATCH=$(grep -i ".*#define MLPACK_VERSION_PATCH.*" src/mlpack/core/util/version.hpp | grep -o "[0-9]*")
          MLPACK_VERSION_VALUE=${MLPACK_VERSION_MAJOR}.${MLPACK_VERSION_MINOR}.${MLPACK_VERSION_PATCH}
          echo "mlpack_r_package=$(echo mlpack_"$MLPACK_VERSION_VALUE".tar.gz)" >> $GITHUB_OUTPUT

      - name: Check Variable
        run: echo ${{ steps.mlpack_version.outputs.mlpack_r_package }}

      - name: Setup
        uses: eddelbuettel/github-actions/r-ci-setup@master

      - name: Bootstrap
        run: ./run.sh bootstrap

      - name: Additional macOS Bootstrap
        run: wget https://mac.r-project.org/tools/gfortran-12.2-universal.pkg -O /tmp/gfortran.pkg && sudo installer -pkg "/tmp/gfortran.pkg" -target / && rm "/tmp/gfortran.pkg"
        if: ${{ matrix.os == 'macOS-latest' }}

      - name: Dependencies
        run: Rscript -e 'install.packages(c("roxygen2", "Rcpp", "RcppArmadillo", "RcppEnsmallen", "testthat", "pkgbuild"))'

      - name: Get CMake
        uses: lukka/get-cmake@latest

      - name: Get CCache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ matrix.os }}
          # this is the default but 'sccache' can be selected here
          variant: ccache

      - name: Prepare R for Ccache 
        run: |
          mkdir -p ~/.R
          cp -vax .github/etc/R_Makevars_${{ matrix.compiler }} ~/.R/Makevars

      - name: Configure Ccache for R
        run: |
          ccache --set-config "sloppiness=include_file_ctime"
          ccache --set-config "hash_dir=false" 
          ccache --show-config
          ccache --zero-stats
        
      - name: Call CMake
        run: cmake -S . -B build -DDEBUG=OFF -DPROFILE=OFF -DBUILD_CLI_EXECUTABLES=OFF -DBUILD_PYTHON_BINDINGS=OFF -DBUILD_JULIA_BINDINGS=OFF -DBUILD_GO_BINDINGS=OFF -DBUILD_R_BINDINGS=ON -DDOWNLOAD_DEPENDENCIES=ON -DBUILD_TESTS=OFF -DCEREAL_INCLUDE_DIR=../cereal-1.3.2/include       
        
      - name: Build
        run: cd build && VERBOSE=1 make -j 4 R
        #run: |
        #  cd build/src/mlpack/bindings/R
        #  wget -q https://dirk.eddelbuettel.com/tmp/mlpack_4.5.1.tar.gz
      
      #- name: Install R package 
      #  run: cd build && R CMD INSTALL ./src/mlpack/bindings/R/mlpack_*.tar.gz
        
      #- name: Test
      #  run: ./run.sh run_tests

      #- name: Coverage
      #  if: ${{ matrix.os == 'ubuntu-latest' }}
      #  run: ./run.sh coverage

      # Show cache statistics
      - name: Show ccache stats
        run: ccache --show-stats --verbose --verbose
      
      - name: Upload R packages
        uses: actions/upload-artifact@v4
        with:
          name: mlpack_r_tarball
          path: build/src/mlpack/bindings/R/${{ steps.mlpack_version.outputs.mlpack_r_package }}

  stepTwo:
    needs: stepOne
    runs-on: ubuntu-latest

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: mlpack_r_tarball

      #- name: Check download
      #  run: |
      #    ls -l mlpack*

      - name: Setup
        uses: eddelbuettel/github-actions/r-ci-setup@master

      - name: Bootstrap
        run: ./run.sh bootstrap
          
      - name: Install rcmdcheck too as needed below
        run: ./run.sh install_r rcmdcheck

      - name: Check Variable
        run: echo '${{needs.stepOne.outputs.r_bindings}}'

      - name: Install Deps
        run: sudo Rscript -e "remotes::install_deps('${{needs.stepOne.outputs.r_bindings}}', dependencies = TRUE)"
         
      - name: Check package
        run: Rscript -e "rcmdcheck::rcmdcheck('${{needs.stepOne.outputs.r_bindings}}', args = c('--no-manual','--as-cran'), error_on = 'error', check_dir = 'check')"

        
